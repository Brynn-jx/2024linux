退出机制的设计
设计一个父进程专门用来接受信号和处理子进程退出，这个子进程就是主线程，这样可以向父进程发送信号而不影响子进程中的线程
并且可以提升可靠性，当子进程挂掉的时候第一时间启动起来。
pthread_cancel(factory.thidAddr[j])在多线程的情况下单纯的使用cancel不行，因为pthread_cond_wait可能在后半部分要获取锁，然后向下执行，但是一个线程
被cancel后这个线程没有开锁，导致后续的线程无法在后半部分获得锁了，所以就阻塞了。
所以需要pthread_cleanup_push 和 pthread_cleanup_pop，他们是定义线程取消（通过 pthread_cancel）时需要执行的清理处理程序的函数。这些函数允许你在关键代码段中注册一个或多个清理处理程序，
以便在线程被取消或者正常退出该代码段时自动调用它们来执行必要的清理工作。

3.0
子进程异常退出后，父进程重新启动子进程